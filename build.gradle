import org.hidetake.gradle.swagger.generator.GenerateSwaggerUI
import org.springframework.boot.gradle.tasks.bundling.BootJar

plugins {
	id 'org.springframework.boot' version '2.7.5'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'com.epages.restdocs-api-spec' version '0.16.2'
	id 'org.hidetake.swagger.generator' version '2.18.2'
	id 'java'
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.bside'
version = ''
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	all {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	annotationProcessor 'org.projectlombok:lombok'
	implementation("com.querydsl:querydsl-jpa")
	implementation("com.querydsl:querydsl-apt")
	implementation("com.querydsl:querydsl-core")
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jpa"
	annotationProcessor("jakarta.persistence:jakarta.persistence-api")
	annotationProcessor("jakarta.annotation:jakarta.annotation-api")
	implementation 'org.springframework.boot:spring-boot-starter-log4j2'
	compileOnly group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
	implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'
	implementation 'org.apache.commons:commons-lang3:3.4'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.16.2'
	swaggerUI 'org.webjars:swagger-ui:4.11.1'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'com.h2database:h2'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

def generated='src/main/generated'
sourceSets {
	main.java.srcDirs += [ generated ]
}

tasks.withType(JavaCompile) {
	options.annotationProcessorGeneratedSourcesDirectory = file(generated)
}

clean.doLast {
	file(generated).deleteDir()
}

def profile = project.hasProperty("profile") ? project.property("profile").toString() : "dev"

// 빌드 시 plain.jar 미생성 및 jar 파일 이름 지정
tasks.named('jar') {
	enabled = false
	project.setArchivesBaseName("${rootProject.name}-${profile}")
}

test {
	useJUnitPlatform()
}

openapi3 {
	server = 'https://localhost:8080'
	title = 'restdocs-swagger API Documentation'
	description = 'Spring REST Docs with SwaggerUI'
	version = '0.0.1'
	format = 'yaml'
}

swaggerSources {
	sample {
		setInputFile(file("${project.buildDir}/api-spec/openapi3.yaml"))
	}
}

tasks.withType(GenerateSwaggerUI) {
	dependsOn 'openapi3'
}

tasks.create("copySwaggerUI", Copy) {
	dependsOn 'generateSwaggerUISample'
	def generateSwaggerUISampleTask = tasks.named('generateSwaggerUISample', GenerateSwaggerUI).get()
	from("${generateSwaggerUISampleTask.outputDir}")
	into("${project.buildDir}/resources/main/static/docs")
}

tasks.withType(BootJar) {
	dependsOn 'copySwaggerUI'
}
